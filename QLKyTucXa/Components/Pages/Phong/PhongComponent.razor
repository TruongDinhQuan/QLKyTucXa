@page "/phong"
@inject IPhongServices Phong
@inject ISinhVienServices SinhVienServices
@inject IHopDongServices HopDongServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@attribute [StreamRendering]
<PageTitle>Phong</PageTitle>

<h1>DANH SÁCH PHÒNG</h1>

<AuthorizeView Roles="Admin, Employee"> 
    <Authorized>
        <button class="btn btn-primary" @onclick="themmoi">thêm mới</button>
        <br />
    </Authorized>
</AuthorizeView>

<ChucNangLoc  SelectedKhu="selectedKhu"  SelectedTang="selectedTang"  SelectedGiuong="selectedGiuong"  phongs="phong" OnSelectedKhuChanged="OnSelectedKhuChanged" OnSelectedTangChanged="OnSelectedTangChanged" OnSelectedGiuongChanged="OnSelectedGiuongChanged"/>
<br/>

@if (filteredPhong is null || filteredPhong.Count == 0)
{
    <h1>Không tìm thấy phòng phù hợp.</h1>
}
else
{
    <div class="row">
        @foreach (var forecast in filteredPhong)
        {
            var isValid = phongValidationDictionary.TryGetValue(forecast.MaPhong, out bool valid) ? valid : false;
            var cardColor = isValid ? "#EF5350" : "#44eaea"; // Màu sắc dựa trên tình trạng phòng
            <div class="col-md-2">
                <div class="card mb-2" style="background-color: @cardColor;" @onclick="() => hienthibangxacnhan(forecast)">
                    <div class="card-body" style="color: #333;">
                        <h5 class="card-title">@forecast.TenPhong</h5>
                        <p class="card-text"><strong>Số Người Ở:</strong> @forecast.SoNguoiO</p>
                        <p class="card-text"><strong>Đơn Giá:</strong> @forecast.DonGia</p>
                        <AuthorizeView Roles="Admin, Employee">
                            <Authorized>
                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-secondary" @onclick="@(() => Update(forecast.MaPhong))">Sửa</button>
                                    <button class="btn btn-danger" @onclick="@(() => Delete(forecast.MaPhong))">Xóa</button>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        }
    </div>
}

<Delete @rendermode="InteractiveServer" xacnhan="xacnhanxoa" OnCancel="CancelDelete" OnOK="okDelete"></Delete>
<Xacnhandatphong @rendermode="InteractiveServer" capnhatmaphong="capnhatmaphong" id="id" user="user" hopdong="hopdong" sinhvien="sinhvien" phongValidationDictionary="phongValidationDictionary" selectedPhong="selectedPhong" showBookingModal="bienhienthixacnhandatphong" ConfirmBooking="ConfirmBooking" CloseModal="CloseModal"></Xacnhandatphong>

@code {
    private List<Phong> phong = new List<Phong>();
    private List<Phong> filteredPhong = new List<Phong>();
    private string? selectedKhu, selectedTang, selectedGiuong, idToDelete;
    private bool xacnhanxoa = false;
    private bool bienhienthixacnhandatphong = false;
    private Phong? selectedPhong;
    private DateTime? bookingTime;
    private ClaimsPrincipal? user;
    private Hopdong hopdong = new Hopdong();
    private Sinhvien? sinhvien = new Sinhvien();
    string id;
    Dictionary<string, bool> phongValidationDictionary = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync() 
    {
        // Lấy thông tin người dùng hiện tại từ AuthenticationStateProvider
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        if (!user.IsInRole("Admin"))
        {
            sinhvien = await SinhVienServices.GetByIdUserAsync(user.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString());
            if(sinhvien != null)
                 hopdong = await HopDongServices.GetHopDongByMssvAsync(sinhvien.Mssv);
            //lấy SoHopDong cần nhập nhật thông qua URL
            var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("SoHopdong", out var phongIdValue))
            {
                id = phongIdValue;
            };
        }
        phong = await Phong.GetPhongAsync();

        foreach (var p in phong)
        {
            bool isValid = await Phong.IsSoGiuongEqualSoNguoiOAsync(p.MaPhong);
            phongValidationDictionary[p.MaPhong] = isValid;
        }
        filteredPhong = phong; // Khởi tạo danh sách lọc bằng toàn bộ danh sách
    }

    private void ApplyFilters()
    {
        filteredPhong = phong.Where(p =>
            (string.IsNullOrEmpty(selectedKhu) || p.Khu == selectedKhu) &&
            (string.IsNullOrEmpty(selectedTang) || p.Tang == selectedTang) &&
            (string.IsNullOrEmpty(selectedGiuong) || p.SoGiuong == int.Parse(selectedGiuong))
        ).ToList();
    }

    private void OnSelectedKhuChanged(string? khu)
    {
        selectedKhu = khu;
        ApplyFilters();
    }

    private void OnSelectedTangChanged(string? tang)
    {
        selectedTang = tang;
        ApplyFilters();
    }

    private void OnSelectedGiuongChanged(string? giuong)
    {
        selectedGiuong = giuong;
        ApplyFilters();
    }

    private void hienthibangxacnhan(Phong phong)
    {
        selectedPhong = phong;
            bienhienthixacnhandatphong = true;
    }

    private void CloseModal()
    {
        bienhienthixacnhandatphong = false;
        selectedPhong = null;
    }

    private async Task capnhatmaphong()
    {
        hopdong.MaPhong =  selectedPhong?.MaPhong;
        await HopDongServices.UpdatePhongAsync(hopdong);
        navigationManager.NavigateTo($"/");
        bienhienthixacnhandatphong = false;
    }

    private async Task ConfirmBooking()
    {
        navigationManager.NavigateTo($"/chitiethopdong?phongId={selectedPhong?.MaPhong}");
        bienhienthixacnhandatphong = false;
    }

    private void themmoi() => navigationManager.NavigateTo("/Addphong");

    private void Update(string id) => navigationManager.NavigateTo($"/Addphong/{id}");

    private void Delete(string id)
    {
        idToDelete = id;
        xacnhanxoa = true;
    }

    private void CancelDelete() => xacnhanxoa = false;

    private async Task okDelete()
    {
        if (!string.IsNullOrEmpty(idToDelete))
        {
            await Phong.DeletePhongAsync(idToDelete);
            xacnhanxoa = false;
            phong = await Phong.GetPhongAsync();
            ApplyFilters();
        }
    }
}
