@page "/hopdong"
@attribute [Authorize(Roles = "Admin, Employee")]
@inject IHopDongServices HopDongServices
@inject IPhongServices PhongServices
@inject IThongBaoServices ThongBaoServices
@inject ISinhVienServices SinhVienServices
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@attribute [StreamRendering]
<PageTitle>DanhSachHopdong</PageTitle>
@if (cachopdong == null || !cachopdong.Any())
{
    <h3>Không có yêu cầu xét duyệt đặt phòng!</h3>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Mã Số Sinh Viên</th>
                <th>Ngày Lập</th>
                <th>Trạng Thái</th>
                <th>Thao Tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in cachopdong)
            {
                <tr>
                    <td>@forecast.Mssv</td>
                    <td>@forecast.NgayLap</td>
                    <td>@forecast.TrangThai</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="@(() => chitiet(forecast.SoHopDong))">Chitiet</button>
                        <MudButton Variant="Variant.Filled" @onclick="@(() => Duyet(forecast.SoHopDong))" Color="Color.Primary">Duyệt</MudButton>
                        <MudSnackbarProvider />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Hopdong> cachopdong = new List<Hopdong>();
    private List<Sinhvien> cacsinhvien = new List<Sinhvien>();
    private Hopdong hopdong = new Hopdong();
    private Phong phong = new Phong();
    //private Sinhvien sinhvien;

    protected override async Task OnInitializedAsync()
    {
        cachopdong = await HopDongServices.GetHopDongByTrangThaiAsync();
        cacsinhvien = await SinhVienServices.laydssinhvien();
    }

    private void chitiet(string id)
    {
        navigationManager.NavigateTo($"/hopdong/{id}");
    }

    private async Task Duyet(string? id)
    {
        // Hiển thị Snackbar
        Snackbar.Add("Hợp đồng đã được duyệt!", Severity.Success);

        // Đợi một thời gian để Snackbar hiển thị
        await Task.Delay(1000);
        if(id != null)
        {
            // Tạo thông báo mới
            var thongBao = new ThongBao
                {
                    MaThongBao = Guid.NewGuid().ToString(),
                    NoiDung = "Thật tuyệt, hợp đồng của bạn đã được phê duyệt",
                    ThoiGianThongBao = DateTime.Now,
                    TrangThaiThongBao = false,
                    Iduser = GetIduser(id)
                };
            // Lưu thông báo vào cơ sở dữ liệu
            await ThongBaoServices.AddThongBaoAsync(thongBao);

            hopdong = await HopDongServices.GetPhongByIdAsync(id);
        }

        if (hopdong != null)
        {
            hopdong.TrangThai = "Thành Công";
            await HopDongServices.UpdatePhongAsync(hopdong);

            phong = await PhongServices.GetPhongByIdAsync(hopdong.MaPhong);

            if (phong != null)
            {
                phong.SoNguoiO = phong.SoNguoiO + 1;
                await PhongServices.UpdatePhongAsync(phong);
            }
        }
        navigationManager.NavigateTo("/hopdong", true);
    }

    private string? GetIduser(string? sohopdong)
    {
        return cachopdong.Where(h => h.SoHopDong == sohopdong)
                              .Join(cacsinhvien, s => s.Mssv, d => d.Mssv, (s, d) => { return d.Iduser;})
                              .FirstOrDefault();
    }
}

