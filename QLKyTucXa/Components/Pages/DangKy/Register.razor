@page "/register"
@using System.Text.RegularExpressions
@inject EmailService EmailService
@inject ITaiKhoanServices tk
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<div class="login-container">
    <div class="login-form">
        @if (!isVerificationStep)

        {
            <div class="text-center mb-4">
                <img src="/image/q-h-logo.png" alt="Logo" class="logo" />
                <h3>Đăng Ký</h3>
            </div>
            <EditForm Model="registerModel" OnValidSubmit="HandleRegistration" OnInvalidSubmit="HandleInvalidSubmit" FormName="Dk">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label>Họ và Tên:</label>
                    <InputText @bind-Value="registerModel.TenDangNhap" class="form-control" />
                    <ValidationMessage For="() => registerModel.TenDangNhap" />
                </div>
                <div class="mb-3">
                    <label>Email:</label>
                    <InputText @bind-Value="registerModel.Email" class="form-control" />
                    <ValidationMessage For="() => registerModel.Email" />
                </div>
                <div class="mb-3">
                    <label>Mật khẩu:</label>
                    <InputText type="password" @bind-Value="registerModel.MatKhau" class="form-control" />
                    <ValidationMessage For="() => registerModel.MatKhau" />
                </div>
                <div class="mb-3">
                    <label>Xác nhận mật khẩu:</label>
                    <InputText type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                    <ValidationMessage For="() => registerModel.ConfirmPassword" />
                </div>
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Đăng ký</button>
                    <button type="button" class="btn btn-secondary" @onclick="quaylaidiem">Quay lại</button>
                </div>
            </EditForm>
        }

        else

        {
            <div class="form-group">
                <label>Nhập mã xác thực:</label>
                <InputText @bind-Value="enteredCode" class="form-control" />
                <button @onclick="VerifyCode" class="btn btn-primary mt-2">Xác thực</button>
            </div>
            @if (!string.IsNullOrEmpty(verificationMessage))

            {
                <p class="message mt-2">@verificationMessage</p>
            }
        }
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-image: url('/image/a01.png');
        background-size: cover;
        background-position: center;
    }

    .login-form {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .logo {
        max-width: 100px;
        margin-bottom: 1rem;
    }

    html, body {
        margin: 0;
        padding: 0;
        overflow: hidden
    }
</style>

@code {
    private Taikhoan registerModel = new Taikhoan();
    private bool isVerificationStep = false;
    private string generatedCode;
    private string enteredCode;
    private string verificationMessage;
    private bool hasEmailError;

    private async Task HandleRegistration()
    {
        if (hasEmailError == false)
        {
            generatedCode = new Random().Next(1000, 9999).ToString();
            string subject = "Mã xác thực email";
            string body = $"Mã xác thực của bạn là: {generatedCode}";

            try
            {
                await EmailService.SendEmailAsync(registerModel.Email, subject, body);
                verificationMessage = "Mã xác thực đã được gửi đến email của bạn.";
                isVerificationStep = true;
            }
            catch (Exception ex)
            {
                verificationMessage = $"Lỗi khi gửi email: {ex.Message}";
            }
        }
    }

    private async Task HandleInvalidSubmit(EditContext editContext)
    {
        var validationMessageStore = new ValidationMessageStore(editContext);
        //kiểm tra email trong cơ sở dữ liệu
        bool emailExists = await tk.EmailExistsAsync(registerModel.Email);
        validationMessageStore.Clear(() => registerModel.Email);

        if (emailExists && !hasEmailError)
        {
            verificationMessage = "Email đã được sử dụng";
            validationMessageStore.Add(() => registerModel.Email, verificationMessage);
            hasEmailError = true;
        }
        else
        {
            hasEmailError = false;
        }
    }

    private void VerifyCode()
    {
        if (enteredCode == generatedCode)
        {
            verificationMessage = "Xác thực email thành công! Bạn đã đăng ký thành công.";
            registerModel.Iduser = GenerateCode();
            registerModel.EmailDaXacMinh = true;
            registerModel.VaiTro = "User";
            tk.AddtaikhoanAsync(registerModel);
            Navigation.NavigateTo("/login");
        }
        else
        {
            verificationMessage = "Mã xác thực không chính xác.";
        }
    }

    private string GenerateCode()
    {
        return Guid.NewGuid().ToString();
    }

    private void quaylaidiem()
    {
        Navigation.NavigateTo("/login");
    }
}
