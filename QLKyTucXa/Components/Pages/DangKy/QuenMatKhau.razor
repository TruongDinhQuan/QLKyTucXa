@page "/quenmatkhau"
@inject ITaiKhoanServices tk
@inject NavigationManager Navigation
@inject EmailService EmailService
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<h3>Quên Mật Khẩu</h3>

@if (!isVerificationStep)
{
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <EditForm Model="resetPasswordModel" OnInvalidSubmit="HandleResetPasswordRequest" FormName="FormQuenMatKhau">
                <DataAnnotationsValidator />
                <div class="mb-3 text-center flex-column">
                    <h3>Yêu Cầu Đặt Lại Mật Khẩu</h3>
                </div>
                <div class="mb-3">
                    <label>Email:</label>
                    <InputText @bind-Value="Email" class="form-control" />
                </div>
                @if (!string.IsNullOrEmpty(verificationMessage))
                {
                    <p class="btn-danger">@verificationMessage</p>
                }
                <div>
                    <button type="submit" class="btn btn-primary">Gửi Mã Xác Thực</button>
                </div>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <div class="form-group">
                <label>Nhập mã xác thực:</label>
                <InputText @bind-Value="enteredCode" class="form-control" />
                <button @onclick="VerifyCode" class="btn btn-primary">Xác thực</button>
            </div>
            <div class="form-group">
                <label>Mật khẩu mới:</label>
                <InputText type="password" @bind-Value="newpassword" class="form-control" />
            </div>
            <div class="form-group">
                <label>Xác nhận mật khẩu mới:</label>
                <InputText type="password" @bind-Value="confrimnewpasswprd" class="form-control" />
            </div>
            <button @onclick="ResetPassword" class="btn btn-primary">Đặt lại mật khẩu</button>
            @if (!string.IsNullOrEmpty(verificationMessage))
            {
                <p class="btn-danger">@verificationMessage</p>
            }
        </div>
    </div>
}

@code {
    string? Email;
    string? newpassword, confrimnewpasswprd;
    private Taikhoan? resetPasswordModel = new Taikhoan();
    //private ResetPasswordModel registerModel = new ResetPasswordModel();
    private bool isVerificationStep = false;
    private string generatedCode;
    private string enteredCode;
    private string verificationMessage;
    //private bool thongbao = false;

    private async Task HandleResetPasswordRequest()
    {
        if (string.IsNullOrEmpty(Email))
        {
            verificationMessage = "Vui lòng nhập địa chỉ email.";
        }
        else
        {
            // Kiểm tra xem email có tồn tại trong cơ sở dữ liệu không
            bool emailExists = await tk.EmailExistsAsync(Email);
            if (!emailExists)
            {
                verificationMessage = "Email này không tồn tại.";
            }
            else
            {
                resetPasswordModel = await tk.GettaikhoanByEmailAsync(Email);
                generatedCode = new Random().Next(1000, 9999).ToString();
                string subject = "Mã xác thực đặt lại mật khẩu";
                string body = $"Mã xác thực của bạn là: {generatedCode}";

                try
                {
                    await EmailService.SendEmailAsync(Email, subject, body);
                    verificationMessage = "Mã xác thực đã được gửi đến email của bạn.";
                    isVerificationStep = true;
                }
                catch (Exception ex)
                {
                    verificationMessage = $"Lỗi khi gửi email: {ex.Message}";
                }
            }
        }
    }

    private void VerifyCode()
    {
        if (enteredCode == generatedCode)
        {
            verificationMessage = "Mã xác thực đúng. Vui lòng nhập mật khẩu mới.";
        }
        else
        {
            verificationMessage = "Mã xác thực không chính xác.";
        }
    }

    private async Task ResetPassword()
    {
        if (!string.IsNullOrEmpty(newpassword) && !string.IsNullOrEmpty(confrimnewpasswprd))
        {
            // Check if the new password meets all the criteria
            if (newpassword.Length < 8 ||
                !newpassword.Any(char.IsLetter) ||
                !newpassword.Any(char.IsDigit) ||
                !newpassword.Any(ch => "!@#$%^&*()_+-=".Contains(ch)))
            {
                verificationMessage = "Mật khẩu phải có ít nhất 8 ký tự, bao gồm ít nhất 1 chữ cái, 1 chữ số và 1 ký tự đặc biệt.";
                return;
            }

            // Check if the passwords match
            if (newpassword != confrimnewpasswprd)
            {
                verificationMessage = "Mật khẩu mới và xác nhận mật khẩu không khớp.";
                return;
            }

            // If all checks pass, update the password
            resetPasswordModel.MatKhau = newpassword;
            resetPasswordModel.ConfirmPassword = confrimnewpasswprd;

            await tk.UpdatetaikhoanAsync(resetPasswordModel);
            verificationMessage = "Mật khẩu đã được đặt lại thành công.";
            Navigation.NavigateTo("/login");
        }
        else
        {
            verificationMessage = "Nhập mật khẩu mới";
        }
    }

}
