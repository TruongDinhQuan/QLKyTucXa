@page "/taikhoan"
@inject ITaiKhoanServices tk
@inject ISinhVienServices SinhVienServices
@inject INhanVienServices NhanVienServices
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@attribute [StreamRendering]
<PageTitle>TaiKhoan</PageTitle>

<div class="header-container">
    <h4 style="margin: 0;">Danh Sách Tài Khoản</h4>
    <ThanhTimKiem OnSearchChanged="FilterDichVu" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="themmoi">Tạo Mới</MudButton>
</div>
<br />
@if (TaiKhoan is null)
{
    <div class="sv-item">
        Loading danh sách. chờ xí...
    </div>
}
else
{
    <div class="form-wrapper">
        <table class="table">
            <thead>
                <tr>
                    <th style="text-align: center;">ID Tài Khoản</th>
                    <th style="text-align: center;">Tên Đăng Nhập</th>
                    <th style="text-align: center;">Email</th>
                    <th style="text-align: center;">Vai Trò</th>
                    <th style="width:250px; text-align: center;">Thao Tác</th> 
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in phantrangtaikhoan)
                {
                    <tr>
                        <td style="text-align: center;">@forecast.Iduser</td>
                        <td style="text-align: center;">@forecast.TenDangNhap</td>
                        <td style="text-align: center;">@forecast.Email</td>
                        <td style="text-align: center;">@forecast.VaiTro</td>
                         <td style="text-align: center;">
                             <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="@(() => Update(forecast.Iduser))">Sửa</MudButton> 
                             <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => Delete(forecast.Iduser))">Khóa</MudButton> 
                        </td> 
                    </tr>
                }
            </tbody>
        </table>
        <div class="pagination">
            <span class="pagination-button" @onclick="PreviousPage" style="cursor: @(CanGoPrevious ? "pointer" : "default");" aria-disabled="@(!CanGoPrevious)">&laquo;</span>
            <span>Trang @CurrentPage/@TotalPages</span>
            <span class="pagination-button" @onclick="NextPage" style="cursor: @(CanGoNext ? "pointer" : "default");" aria-disabled="@(!CanGoNext)">&raquo;</span>
        </div>
    </div>
}
<Delete @rendermode="InteractiveServer" xacnhan="xacnhanxoa" OnCancel="CancelDelete" OnOK="okDelete"></Delete> 

@code {
    private List<Taikhoan> TaiKhoan = new List<Taikhoan>();
    private List<Taikhoan> timkiemtaikhoan = new List<Taikhoan>();
    private List<Taikhoan> phantrangtaikhoan = new List<Taikhoan>();
    private string? idToDelete;
    private bool xacnhanxoa = false;
    //phân trang
    private int PageSize = 5;
    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)TaiKhoan.Count / PageSize);
    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        TaiKhoan = await tk.GettaikhoanAsync();
        timkiemtaikhoan = TaiKhoan;
        UpdatePaginatedDichVu();
    }

    private void themmoi()
    {
        navigationManager.NavigateTo("/Addtaikhoan");
    }

    private void Update(string id)
    {
        navigationManager.NavigateTo($"/Addtaikhoan/{id}");
    }

    private void Delete(string id)
    {
        idToDelete = id;
        xacnhanxoa = true;
    }

    private void CancelDelete()
    {
        xacnhanxoa = false;
    }

    private async Task okDelete()
    {
        if (!string.IsNullOrEmpty(idToDelete))
        {
            try
            {
                // Gọi phương thức xóa tài khoản
                await tk.DeletetaikhoanAsync(idToDelete);

                // Nếu xóa thành công, hiển thị thông báo thành công
                Snackbar.Add("Xóa thành công!", Severity.Success, config =>
                {
                    config.VisibleStateDuration = 500;
                    config.HideTransitionDuration = 100;
                    config.ShowTransitionDuration = 500;
                });

                await Task.Delay(1000);

                xacnhanxoa = false;

                // Tải lại danh sách tài khoản sau khi xóa
                TaiKhoan = await tk.GettaikhoanAsync();
                timkiemtaikhoan = TaiKhoan;
                UpdatePaginatedDichVu();
            }
            catch (Exception ex)
            {
                // Bắt ngoại lệ nếu xóa thất bại (do tài khoản đang được tham chiếu)
                Snackbar.Add($"Không thể xóa tài khoản này!", Severity.Error, config =>
                {
                    config.VisibleStateDuration = 600;
                    config.HideTransitionDuration = 100;
                    config.ShowTransitionDuration = 500;
                });
            }
        }
    }


    private void FilterDichVu(string searchTerm)
    {
        searchTerm = searchTerm?.Trim();
        if (string.IsNullOrWhiteSpace(searchTerm))
            TaiKhoan = timkiemtaikhoan;
        else
        {
            TaiKhoan = timkiemtaikhoan
                .Where(d => d.Iduser.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        CurrentPage = 1; // Reset to the first page after filtering
        UpdatePaginatedDichVu();
    }

    private void UpdatePaginatedDichVu()
    {
        phantrangtaikhoan = TaiKhoan
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            CurrentPage--;
            UpdatePaginatedDichVu();
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            CurrentPage++;
            UpdatePaginatedDichVu();
        }
    }
}

<style>
    .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 100%;
        margin: auto;
    }

    .search-bar {
        flex-grow: 1;
        max-width: 600px;
        margin: 0 20px;
        display: flex;
        align-items: center;
    }

    .pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1px;
        margin-top: 1px;
    }

    .pagination-button {
        font-size: 15px;
        color: #007bff;
        cursor: pointer;
        user-select: none;
        padding: 5px 10px;
        border-radius: 5px;
        transition: background-color 0.3s, color 0.3s;
    }

        .pagination-button:hover {
            background-color: #e9ecef;
            color: #0056b3;
        }

        .pagination-button[aria-disabled="true"] {
            color: #6c757d;
            cursor: default;
        }

    .form-wrapper {
        background-color: #E1F5FE; /* Màu nền sáng (AliceBlue) */
        border: 1px solid #ccc; /* Đường viền xám nhạt */
        border-radius: 8px; /* Bo tròn các góc */
        padding: 8px; /* Khoảng cách nội dung từ các cạnh */
        margin: 8px; /* Khoảng cách từ các phần tử khác */
    }
</style>

