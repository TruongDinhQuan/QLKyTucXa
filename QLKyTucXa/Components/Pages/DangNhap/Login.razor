@page "/login"
@inject DataQlktxContext dbcontext
@inject NavigationManager navigationManager
@inject LuuBien luu
@attribute [AllowAnonymous]
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <img src="/image/Screenshot 2024-08-05 162350.png" style="max-height:5rem;"/>
                <h3>Đăng Nhập</h3>
            </div>
            <div class="mb-3">
                <label>Tên Đăng Nhập</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username"></InputText>
                <ValidationMessage For="() => Model.Username"/>
            </div>
            <div class="mb-3">
                <label>Mật Khẩu</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password"></InputText>
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            <div>
                <label>Chưa có tài khoản?</label>
                <a href="/register" style="color: blue; text-decoration: none;">Đăng ký</a>
                <a href="/quenmatkhau" style="color: brown; margin-left: 112px;">Quên mật khẩu</a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewContro Model { get; set; } = new();

    private string? errorMessage;
    private async Task Authenticate()
    {
        var userAccount = dbcontext.Taikhoans.Where(x => x.TenDangNhap == Model.Username).FirstOrDefault();
        if (userAccount is null || userAccount.MatKhau != Model.Password)
        {
            errorMessage = "Sai tài khoản hoặc mật khẩu";
            return;
        }

        luu.IDUser = userAccount.Iduser;
        luu.EmailDN = userAccount.Email;

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Username),
            new Claim(ClaimTypes.Role, userAccount.VaiTro),
             new Claim(ClaimTypes.NameIdentifier, userAccount.Iduser.ToString()),
             new Claim(ClaimTypes.Email, userAccount.Email.ToString())
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        if (HttpContext != null)
        {
            await HttpContext.SignInAsync(principal);
        }
        navigationManager.NavigateTo("/");
    }
}
