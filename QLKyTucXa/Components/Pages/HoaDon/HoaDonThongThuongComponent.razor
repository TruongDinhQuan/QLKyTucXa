@page "/hoadonthongthuong"
@inject IHoaDonServices HoaDonServices
@inject IDichVuServices DichVuServices
@inject INhanVienServices NhanVienServices
@inject IHopDongServices HopDongServices
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@rendermode InteractiveServer
<PageTitle>HoaDonThongThuong</PageTitle>

<div class="header-container">
        <h4 style="margin: 0;">Danh sách hóa đơn - Thông Thường</h4>
    <ThanhTimKiem OnSearchChanged="FilterByTenPhong" />
        <MudButton Variant="Variant.Filled" OnClick="themmoi" Color="Color.Primary">Tạo Mới</MudButton>
</div>
<br/>
@if (isAddingNew)
{
    <TaoHD bienkiemtra="isAddingNew" kiemtraloaihoadon="true" OnSave="LuuHD" ThoatVaSave="CancelDelete">
    </TaoHD>
}

@if (bienthemsp)
{
    <ThemDV bienmemaydi="bienthemsp" kiemtraloaihoadon="true" dichvu="dichvu" OnSaveCTHD="luuCTHD" ThoatVaSave="CancelDelete"></ThemDV>
}

@if (hienthiDv)
{
    <div @onclick="() => hienthiDv = false">
        <HienthiDV @rendermode="InteractiveServer" xoaDV="xoaDV" kiemtraloaihoadon="true" Chophepchinh="hienthiDv" SaveEditCallback="OnSaveEdit" haodon="haodon" dichvu="dichvu" DvtheoMaHd="DvtheoMaHd"></HienthiDV>
    </div>
}

    @if (haodon is null)
    {
        <div class="sv-item">  Loading danh sách. chờ xí...   </div>
    }
    else
    {
    <div class="form-wrapper">
        <table class="table">
             <thead>
                <tr>
                    <th style="width: 20%; text-align: center;">Mã Hóa Đơn</th
                    <th style="width: 12%; text-align: center;">Ngày Lập</th>
                    <th style="width: 23%; text-align: center;">Phương Thức ThanhToán</th>
                    <th style="width: 18%; text-align: center;">Trạng Thái</th>
                    <th style="width: 10%; text-align: center;">Dịch Vụ</th>
                    <th style="width: 13%; text-align: center;">Thao Tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in PaginatedHoaDon)
                {
                    <tr>
                        <td style=" text-align: center;">@forecast.MaHd</td>
                        <td style=" text-align: center;">@forecast.NgayLapHd</td>
                        <td style=" text-align: center;">@forecast.PhuongThucThanhToan</td>
                        <td style=" text-align: center;">@forecast.TrangThai</td>
                        <td style=" text-align: center;"><MudButton Variant="Variant.Filled" OnClick="@(() => hienthi(forecast.MaHd))" Color="Color.Secondary">Xem</MudButton></td>
                        <td style=" text-align: center;">

                                   <MudCarousel Class="mud-width-full" Style="height:40px; width: 210px" TData="object" ShowBullets="false">
                                <MudCarouselItem Transition="transition">
                                    <div class="d-flex flex-column align-items-center" style="height:100%; justify-content: center;">
                                        <MudButton Variant="Variant.Filled" OnClick="@(() => themsp(forecast.MaHd))" Color="Color.Info" Size="Size.Small">Thêm D.Vụ</MudButton>
                                    </div>
                                </MudCarouselItem>

                                <MudCarouselItem Transition="transition">
                                    <div class="d-flex flex-column align-items-center" style="height:100%; justify-content: center;">
                                        <MudButton Variant="Variant.Filled" OnClick="@(() => Delete(forecast.MaHd))" Color="Color.Error" Size="Size.Small">Xóa</MudButton>
                                    </div>
                                </MudCarouselItem>

                                <MudCarouselItem Transition="transition">
                                    <div class="d-flex flex-column align-items-center" style="height:100%; justify-content: center;">
                                        <MudButton Variant="Variant.Filled" @onclick="@(() => thanhtoan(forecast))" Color="Color.Warning" Size="Size.Small">ThanhToán</MudButton>
                                    </div>
                                </MudCarouselItem>
                            </MudCarousel>
                            <MudSnackbarProvider/>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (haodon.Count > PageSize)
        {
            <div class="pagination">
                <span class="pagination-button" @onclick="PreviousPage" style="cursor: @(CanGoPrevious ? "pointer" : "default");" aria-disabled="@(!CanGoPrevious)">&laquo;</span>
                    <span>Trang @CurrentPage/@TotalPages</span>
                    <span class="pagination-button" @onclick="NextPage" style="cursor: @(CanGoNext ? "pointer" : "default");" aria-disabled="@(!CanGoNext)">&raquo;</span>
              </div>
        }
    </div>
    }
    <Delete @rendermode="InteractiveServer" xacnhan="xacnhanxoa" OnCancel="CancelDelete" OnOK="okDelete"></Delete>
@code {
    private List<Hoadon> haodon = new List<Hoadon>(); // lấy danh sách hóa đơn đang thanh toán
    private List<Hoadon> haodontimkiem = new List<Hoadon>(); // hóa đơn tìm kiếm
    private List<Hoadon> hoadondonkiemtra = new List<Hoadon>(); //lấy toàn bộ hóa đơn
    private Hoadon hoadon1 = new Hoadon(); // dùng để lưu hóa đơn
    private Nhanvien nhanvien = new Nhanvien(); // lấy ra nhân viên tạo hóa đơn
    private List<Dichvu> dichvu = new List<Dichvu>(); // lấy ra toàn bộ dịch vụ
    private List<Chitiethoadon> DvtheoMaHd = new List<Chitiethoadon>(); // lấy dịch vụ theo từng hóa đơn
    private Chitiethoadon bienluuCTHD = new Chitiethoadon(); // dùng để lưu chi tiết hóa đơn
    private List<Sinhvien> sinhvien = new List<Sinhvien>(); // dùng để lấy ra những sinh viên có trong phòng
    private List<Phong> cacphong = new List<Phong>(); // dùng để hiển thị phòng
    private List<Hopdong> cachopdong = new List<Hopdong>(); //dùng để dùng câu truy vấn
    private List<Hoadon> PaginatedHoaDon = new List<Hoadon>(); // hóa đơn phân trang
                                                               //Phân trang
    private int PageSize = 5;
    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)haodon.Count / PageSize);
    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;
    //được dùng trong MudCarousel
    private Transition transition = Transition.Slide;
    // các biến dùng để hiển thị các component con
    private string? idToDelete;
    private bool xacnhanxoa = false;
    private bool isAddingNew = false;
    private bool bienthemsp = false;
    private bool hienthiDv = false;
    private bool kiemtraloaihoadon = false;
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        haodon = await HoaDonServices.GetHoaDonThongThuongAsync();
        haodontimkiem = haodon;
        cachopdong = await HopDongServices.GetPhongAsync();
        dichvu = await DichVuServices.GetDichvuAsync();
        nhanvien = await NhanVienServices.GetnhavienByIduserAsync(user.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString());
        UpdatePaginatedDichVu();
    }

    private async Task OnSaveEdit(Chitiethoadon chiTietHoaDon)
    {
        Snackbar.Add("Thông tin đã được cập nhật!", Severity.Success, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
        await Task.Delay(1000);
        await HoaDonServices.UpdateChiTietHoaDonAsync(chiTietHoaDon);
    }

    private async Task thanhtoan(Hoadon haodonn)
    {
        DvtheoMaHd = await HoaDonServices.GetChiTietHoaDonByMaHDAsync(haodonn.MaHd);
        if(!DvtheoMaHd.Any())
        {
            Snackbar.Add("Đã thanh toán thành công!", Severity.Success, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
            await Task.Delay(1000);
            haodonn.TrangThai = "Đã thanh toán";
            await HoaDonServices.UpdateHoaDonAsync(haodonn);
            haodon = await HoaDonServices.GetHoaDonByTrangThaiAsync();
        }
        else
        {
            Snackbar.Add("Chưa có dịch vụ!", Severity.Warning, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
        }
    }

    private async Task xoaDV(Chitiethoadon chiTietHoaDon)
    {
        if (chiTietHoaDon != null)
        {
            Snackbar.Add("Xóa thành công!", Severity.Success, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
            await Task.Delay(1000);
            await HoaDonServices.DeleteChiTietHoaDonAsync(chiTietHoaDon.MaHd, chiTietHoaDon.MaDv);
            DvtheoMaHd = await HoaDonServices.GetChiTietHoaDonByMaHDAsync(chiTietHoaDon.MaHd);
        }
    }

    private async Task LuuHD(Hoadon data)
    {
        if (!string.IsNullOrEmpty(data.PhuongThucThanhToan) &&  kiemtraloaihoadon == false)
        {
            hoadon1.MaHd = Guid.NewGuid().ToString();
            hoadon1.NgayLapHd = DateOnly.FromDateTime(DateTime.Now);
            hoadon1.PhuongThucThanhToan = data.PhuongThucThanhToan;
            hoadon1.TrangThai = "Đang thanh toán";
            hoadon1.MaPhong = data.MaPhong;
            hoadon1.IdnhanVien = nhanvien.IdnhanVien;
            await HoaDonServices.AddHoaDonAsync(hoadon1);
            Snackbar.Add("Hóa đơn đã được tạo thành công!", Severity.Success, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
            await Task.Delay(1000);
            isAddingNew = false;
            haodon = await HoaDonServices.GetHoaDonThongThuongAsync();
                        UpdatePaginatedDichVu();
        }
        else
            Snackbar.Add("Phải điền đầy đủ thông tin!", Severity.Warning, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
    }


    private async Task luuCTHD(Chitiethoadon dt)
    {
        if(!string.IsNullOrEmpty(dt.MaDv))
        {
            if(dt.SoLuong.HasValue)
            {
                bienluuCTHD.MaDv = dt.MaDv;
                if(dt.SoLuong > 0 && dt.SoLuong < 10000)
                {
                    Snackbar.Add("Thêm dịch vụ thành công!", Severity.Success, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
                    await Task.Delay(1000);
                    bienluuCTHD.ChiSoDau = dt.ChiSoDau;
                    bienluuCTHD.ChiSoCuoi = dt.ChiSoCuoi;
                    bienluuCTHD.SoLuong = dt.SoLuong;
                    await HoaDonServices.AddChiTietHoaDonAsync(bienluuCTHD);
                    bienthemsp = false;
                }
                else
                {
                    Snackbar.Add("Nhập số bị sai!", Severity.Warning, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
                }
            }
            else
            {
                Snackbar.Add("bạn cần nhập đủ thông tin!", Severity.Warning, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
            }
        }
        else
        {
            Snackbar.Add("bạn cần nhập đủ thông tin!", Severity.Warning, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
            return;
        }
    }
    private async Task themmoi()
    {
        hoadondonkiemtra = await HoaDonServices.GetHoaDonAsync();
        isAddingNew = true;
    }

    private void Delete(string id)
    {
        idToDelete = id;
        xacnhanxoa = true;
    }

    private void CancelDelete() 
    {
        xacnhanxoa = false;
        isAddingNew = false;
        bienthemsp = false;
    }
    private async Task okDelete()
    {
        Snackbar.Add("Xóa thành công!", Severity.Success, config =>{config.VisibleStateDuration = 400;config.HideTransitionDuration = 100;config.ShowTransitionDuration = 500;});
        await Task.Delay(1000);
        if (!string.IsNullOrEmpty(idToDelete))
        {
            await HoaDonServices.DeleteToanBoCTHDAsync(idToDelete);
            await HoaDonServices.DeleteHoaDonAsync(idToDelete);
            haodon = await HoaDonServices.GetHoaDonThongThuongAsync();
            xacnhanxoa = false;
            haodontimkiem = haodon;
            UpdatePaginatedDichVu();
        }
    }
    private async Task hienthi(string id)
    {
        DvtheoMaHd = await HoaDonServices.GetChiTietHoaDonByMaHDAsync(id);
        hienthiDv = true;
    }

    void themsp(string id)
    {
        bienluuCTHD.MaHd = id;
        bienthemsp = true;
    }

    private async Task FilterByTenPhong(string searchTenPhong)
    {
        searchTenPhong = searchTenPhong?.Trim();
        if (string.IsNullOrWhiteSpace(searchTenPhong))
        {
            haodon = haodontimkiem;
        }
        else
        {

            // Tìm hóa đơn dựa trên mã phòng
            haodon = haodontimkiem
                .Where(d => d.MaHd.Contains(searchTenPhong, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        CurrentPage = 1; // Reset to the first page after filtering
        UpdatePaginatedDichVu();
    }

    private void UpdatePaginatedDichVu()
    {
        PaginatedHoaDon = haodon
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            CurrentPage--;
            UpdatePaginatedDichVu();
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            CurrentPage++;
            UpdatePaginatedDichVu();
        }
    }
}
<style>

      .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 100%;
        margin: auto;
    }

    .search-bar {
        flex-grow: 1;
        max-width: 600px;
        margin: 0 20px;
        display: flex;
        align-items: center;
    }
     .pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1px;
        margin-top: 1px;
    }

    .pagination-button {
        font-size: 15px;
        color: #007bff;
        cursor: pointer;
        user-select: none;
        padding: 5px 10px;
        border-radius: 5px;
        transition: background-color 0.3s, color 0.3s;
    }

        .pagination-button:hover {
            background-color: #e9ecef;
            color: #0056b3;
        }

        .pagination-button[aria-disabled="true"] {
            color: #6c757d;
            cursor: default;
        }

    .form-wrapper {
        background-color: #E1F5FE; /* Màu nền sáng (AliceBlue) */
        border: 1px solid #ccc; /* Đường viền xám nhạt */
        border-radius: 8px; /* Bo tròn các góc */
        padding: 8px; /* Khoảng cách nội dung từ các cạnh */
        margin: 5px; /* Khoảng cách từ các phần tử khác */
        max-width: 1000px;
    }
</style>